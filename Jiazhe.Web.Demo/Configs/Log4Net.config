<?xml version="1.0" encoding="utf-8"?>
<configuration>
  
  <configSections>
    <!--log4net 申明-->
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
  </configSections>

  <log4net debug="true">
    <!--定义输出到文件中-->
    <appender name="rollingFile" type="log4net.Appender.RollingFileAppender,log4net">
      <!--file可以指定具体的路径 eg : d:\\test.log。不指定的话log被生成在项目的bin/Debug 或者 bin/Release目录下 （web的项目 默认生成在根目录下）-->
      <param name="File" value="log//NHibernate//" />
      <!--追加方式,是否追加到文件-->
      <param name="AppendToFile" value="false" />
      <!--日志文件名-->
      <param name="DatePattern" value="yyyy-MM-dd&quot;.log&quot;" />
      <!--日期为滚动类型(每天产生一个日志文件)-->
      <param name="RollingStyle" value="Date" />
      <!--关闭固定文件方式-->
      <param name="StaticLogFileName" value="false" />
      <layout type="log4net.Layout.PatternLayout">
        <param name="ConversionPattern" value=" 运行时间：%d%n 运行行号:%l%n 线 程 ID：[%t]%n 日志级别：%-5p%n 日志对象：%c%n 对象位置：[%thread] (%file:%line) %n 日志消息：%m%n 异常：%exception%n%n" />
      </layout>
    </appender>
    
    <appender name="ErrorAppender" type="log4net.Appender.RollingFileAppender">
      <!--设置日志存储路径-->
      <param name="File" value="Log//LogError//" />
      <!--是否追加到文件-->
      <param name="AppendToFile" value="false" />
      <!--最多产生的日志文件数，超过则只保留最新的n个。设定值value="－1"为不限文件数-->
      <param name="MaxSizeRollBackups" value="10" />
      <param name="MaxFileSize" value="2M" />
      <!--是否只写到一个文件中-->
      <param name="StaticLogFileName" value="false" />
      <!--这是按日期产生文件夹，并在文件名前也加上日期-->
      <param name="DatePattern" value="yyyyMM/dd&quot;.log&quot;" />
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <param name="RollingStyle" value="Date" />
      <layout type="log4net.Layout.PatternLayout">
        <param name="ConversionPattern" value="%n异常时间：%d [%t] %n异常级别：%-5p %n异常位置：[%thread] (%file:%line) %n消息描述：%message%n异常：%exception%n%n " />
      </layout>
    </appender>
    
    <appender name="InfoAppender" type="log4net.Appender.RollingFileAppender">
      <!--设置日志存储路径-->
      <param name="File" value="Log\\LogInfo\" />
      <!--是否追加到文件-->
      <param name="AppendToFile" value="false" />
      <!--最多产生的日志文件数，超过则只保留最新的n个。设定值value="－1"为不限文件数-->
      <param name="MaxSizeRollBackups" value="-1" />
      <param name="MaxFileSize" value="1024" />
      <!--是否只写到一个文件中-->
      <param name="StaticLogFileName" value="false" />
      <!--这是按日期产生文件夹，并在文件名前也加上日期-->
      <param name="DatePattern" value="yyyyMM/dd&quot;.log&quot;" />
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <param name="RollingStyle" value="Date" />
      <layout type="log4net.Layout.PatternLayout">
        <param name="ConversionPattern" value="%n日志时间：%d [%t] %n日志级别：%-5p %n消息描述：%c [%x] %n%m %n " />
      </layout>
    </appender>

    <appender name="ADONetAppender" type="log4net.Appender.ADONetAppender,log4net">

      <!--BufferSize为缓冲区大小，只有日志记录超设定值才会一块写入到数据库-->
      <bufferSize value="1" /><!--或写为<param name="BufferSize" value="10" />-->



      <!--引用-->
      <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />

      <!--连接数据库字符串-->
      <connectionString value="data source=.;database=JiazheWebDataBase;user id=sa;password=123456;integrated security=false;persist security info=True;" />

      <!--插入到表Log-->
      <commandText value="INSERT INTO Log ([Date],[Thread],[Level],[Logger]) VALUES (@log_date, @thread, @log_level, @logger)" />

      <!--日志记录时间，RawTimeStampLayout为默认的时间输出格式 -->
      <parameter>
        <parameterName value="@log_date" />
        <dbType value="DateTime" />
        <layout type="log4net.Layout.RawTimeStampLayout" />
      </parameter>

      <!--线程号-->
      <parameter>
        <parameterName value="@thread" />
        <dbType value="String" />
        <!--长度不可以省略，否则不会输出-->
        <size value="100" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%thread" />
        </layout>
      </parameter>

      <!--日志等级-->
      <parameter>
        <parameterName value="@log_level" />
        <dbType value="String" />
        <size value="100" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%level" />
        </layout>
      </parameter>

      <!--日志记录类名称-->
      <parameter>
        <parameterName value="@logger" />
        <dbType value="String" />
        <size value="200" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%logger" />
        </layout>
      </parameter>

      <!--操作者。这个是自定义的输出字段，使用重新实现的布局器ReflectionLayout -->
      <parameter>
        <parameterName value="@operator" />
        <!--设置为Int32时只有bufferSize的 value<="1"才正确输出，没有找出原因。-->
        <dbType value="Int16" />
        <layout type="TGLog.ExpandLayout2.ReflectionLayout,TGLog">
          <conversionPattern value="%property{Operator}" />
        </layout>
      </parameter>

      <!--操作对象-->
      <parameter>
        <parameterName value="@operand" />
        <dbType value="String" />
        <size value="300" />
        <layout type="TGLog.ExpandLayout2.ReflectionLayout,TGLog">
          <conversionPattern value="%property{Operand}" />
        </layout>
      </parameter>

      <!--IP地址-->
      <parameter>
        <parameterName value="@ip" />
        <dbType value="String" />
        <size value="20" />
        <layout type="TGLog.ExpandLayout2.ReflectionLayout,TGLog">
          <conversionPattern value="%property{IP}" />
        </layout>
      </parameter>

      <!--机器名-->
      <parameter>
        <parameterName value="@machineName" />
        <dbType value="String" />
        <size value="100" />
        <layout type="TGLog.ExpandLayout2.ReflectionLayout,TGLog">
          <conversionPattern value="%property{MachineName}" />
        </layout>
      </parameter>

      <!--浏览器-->
      <parameter>
        <parameterName value="@browser" />
        <dbType value="String" />
        <size value="50" />
        <layout type="TGLog.ExpandLayout2.ReflectionLayout,TGLog">
          <conversionPattern value="%property{Browser}" />
        </layout>
      </parameter>

      <!--日志消息-->
      <parameter>
        <parameterName value="@message" />
        <dbType value="String" />
        <size value="3000" />
        <layout type="TGLog.ExpandLayout2.ReflectionLayout,TGLog">
          <conversionPattern value="%property{Message}" />
        </layout>
      </parameter>

      <!--动作类型-->
      <parameter>
        <parameterName value="@action_type" />
        <dbType value="Int16" />
        <layout type="TGLog.ExpandLayout2.ReflectionLayout,TGLog">
          <conversionPattern value="%property{ActionType}" />
        </layout>
      </parameter>

      <!--记录日志的位置-->
      <parameter>
        <parameterName value="@location" />
        <dbType value="String" />
        <size value="2000" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%location" />
        </layout>
      </parameter>

      <!--异常信息。ExceptionLayout 为异常输出的默认格式-->
      <parameter>
        <parameterName value="@exception" />
        <dbType value="String" />
        <size value="4000" />
        <layout type="log4net.Layout.ExceptionLayout" />
      </parameter>
    </appender>
    
    <!--配置程序报错专用-->
    <logger name="testLog">
      <level value="ALL" />
      <appender-ref ref="InfoAppender" />
    </logger>
    <!--NHibernate-->
    <logger name="NHibernate" additivity="true">
      <level value="ERROR" />
      <appender-ref ref="DebugAppender" />
    </logger>
    <logger name="NHibernate.SQL" additivity="true">
      <level value="DEBUG" />
      <appender-ref ref="DebugAppender" />
    </logger>
    <logger name="NHibernate.AdoNet.AbstractBatcher" additivity="true">
      <level value="DEBUG" />
      <appender-ref ref="DebugAppender" />
    </logger>
    <logger name="logerror">
      <level value="ERROR" />
      <appender-ref ref="ErrorAppender" />
    </logger>
    <logger name="loginfo">
      <level value="INFO" />
      <appender-ref ref="InfoAppender" />
    </logger>
    <!--root实际上就是一个根logger，所有其它logger都默认继承它-->
    <root>
      <!--从高到低的七个级别：OFF,FATAL,ERROR,WARN,INFO,DEBUG,ALL-->
      <level value="DEBUG" />
      <appender-ref ref="rollingFile" />
      <appender-ref ref="ADONetAppender" />
    </root>
  </log4net>

</configuration>
<!--==================================layout节点的配置说明==================================-->
<!--                                                                        Made By AX      -->
<!--        %m(message):输出的日志消息，如ILog.Debug(…)输出的一条消息                          -->
<!--        %n(new line):换行                                                                   -->
<!--        %d(datetime):输出当前语句运行的时刻                                                 -->
<!--        %r(run time):输出程序从运行到执行到当前语句时消耗的毫秒数                           -->
<!--        %t(thread id):当前语句所在的线程ID                                                  -->
<!--        %p(priority): 日志的当前优先级别，即DEBUG、INFO、WARN…等                           -->
<!--        %c(class):当前日志对象的名称，例如：                                                -->
<!--               模式字符串为：%-10c -%m%n                                                    -->
<!--               代码为：                                                                     -->
<!--        ILog log=LogManager.GetLogger(“Exam.Log”);                                        -->
<!--        log.Debug(“Hello”);                                                               -->
<!--            则输出为下面的形式：                                                            -->
<!--        Exam.Log       - Hello                                                              -->
<!--        %L：输出语句所在的行号                                                              -->
<!--        %F：输出语句所在的文件名                                                            -->
<!--        %-数字：表示该项的最小长度，如果不够，则用空格填充                                  -->
<!--        例如，转换模式为%r [%t]%-5p %c - %m%n 的 PatternLayout 将生成类似于以下内容的输出： -->
<!--        176 [main] INFO  org.foo.Bar - Located nearest gas station.                         -->